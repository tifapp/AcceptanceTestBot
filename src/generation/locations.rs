use crate::location::location::RoswaalLocation;

use super::{constants::GENERATED_HEADER, interface::RoswaalTypescriptGenerate};

pub type LocationsTypescript = String;

impl RoswaalTypescriptGenerate<LocationsTypescript> for RoswaalLocation {
    fn typescript(&self) -> LocationsTypescript {
        format!("\
  export const {} = {{
    latitude: {:.16},
    longitude: {:.16}
  }}
",
            self.name().to_ascii_pascal_case_string(),
            self.coordinate().latitude(),
            self.coordinate().longitude()
        )
    }
}

static LOCATIONS_NAMESPACE_DECL_START: &str = "export namespace TestLocations {\n";
static LOCATIONS_NAMESPACE_DECL_END: &str = "}\n";
static LOCATION_SPACING: &str = "  ";

impl RoswaalTypescriptGenerate<LocationsTypescript> for Vec<&RoswaalLocation> {
    fn typescript(&self) -> LocationsTypescript {
        let mut ts = GENERATED_HEADER.to_string();
        ts.push_str(LOCATIONS_NAMESPACE_DECL_START);
        ts.push_str(LOCATION_SPACING);
        for (i, location_ts) in self.iter().map(|l| l.typescript()).enumerate() {
            ts.push_str(&location_ts);
            if i < self.len() - 1 {
                ts.push_str(LOCATION_SPACING);
            }
        }
        ts.push_str(LOCATIONS_NAMESPACE_DECL_END);
        ts
    }
}

#[cfg(test)]
mod test {
    use std::str::FromStr;

    use crate::{generation::interface::RoswaalTypescriptGenerate, location::{coordinate::LocationCoordinate2D, location::RoswaalLocation, name::RoswaalLocationName}};

    #[test]
    fn test_location_typescript() {
        let coordinate = LocationCoordinate2D::try_new(-40.019383, 122.902892).unwrap();
        let name = RoswaalLocationName::from_str("San Francisco").unwrap();
        let location = RoswaalLocation::new(name, coordinate);
        let expected_ts = "\
  export const SanFrancisco = {
    latitude: -40.0193824768066406,
    longitude: 122.9028930664062500
  }
";
        assert_eq!(location.typescript(), expected_ts)
    }

    #[test]
    fn test_locations_vector_typescript() {
        let location1 = RoswaalLocation::new(
            RoswaalLocationName::from_str("Oakland").unwrap(),
            LocationCoordinate2D::try_new(50.0, 50.0).unwrap()
        );
        let location2 = RoswaalLocation::new(
            RoswaalLocationName::from_str("New York").unwrap(),
            LocationCoordinate2D::try_new(60.0, 60.0).unwrap()
        );
        let locations = vec![&location1, &location2];
        let expected_ts = "\
// Generated by Roswaal, do not touch.

export namespace TestLocations {
  export const Oakland = {
    latitude: 50.0000000000000000,
    longitude: 50.0000000000000000
  }
  export const NewYork = {
    latitude: 60.0000000000000000,
    longitude: 60.0000000000000000
  }
}
";
        assert_eq!(locations.typescript(), expected_ts)
    }
}
